Pierre's Sweet and Savory Treats
Pierre is back! He wants you to create a new application to market his sweet and savory treats. This time, he would like you to build an application with user authentication and a many-to-many relationship. Here are the features he wants in the application:

The application should have user authentication. A user should be able to log in and log out. Only logged in users should have create, update, and delete functionality. All users should be able to have read functionality.
There should be a many-to-many relationship between Treats and Flavors. A treat can have many flavors (such as sweet, savory, spicy, or creamy) and a flavor can have many treats. For instance, the "sweet" flavor could include chocolate croissants, cheesecake, and so on.
A user should be able to navigate to a splash page that lists all treats and flavors. Users should be able to click on an individual treat or flavor to see all the treats/flavors that belong to it.
Objectives
Your code will be reviewed for the following objectives:

// create Treats.cs and Flavor.cs entities with CRUD functionality
Does at least one of your classes have all CRUD methods implemented in your app?

// Details.cshtml on both show many-to-many relationship established
Are you able to view both sides of the many-many relationship? For a particular instance of a class, are you able to view all of the instances of the other class that are related to it?

// create Login(), LogOff(), Register(), Index() controllers 
// create Login.cshtml, Register.cshtml, Index.cstml in Views/Account/
Are users able to register, log in and log out with Identity?

// add [Authorize] attributes to CUD TreatsController and FlavorsController, and [Anonymous]? to Details() action of both
Is Create, Update and Delete functionality limited to authenticated users?

// confirm .ignore file has these
Build files and sensitive information are included in .gitignore file and are not in Git history, and includes instructions on how to create the appsettings.json and set up the project.

// confirm
Project is in a polished, portfolio-quality state.
The promptâ€™s required functionality and baseline project requirements are in place by the deadline.



// appsettings.json
> create and update appsettings.json with db name

// Program.cs
> add Program.cs, 
	copy boiler plate code over
		update builder.Services.AddDbContext<T>... where T is PierresTreatsContext
			update builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<T>()
				
> double check Program.cs has all neccessary Identity Service setups and app.UseAuth...
	
// database context
> create PierresTreatsContext.cs /w DbSet<Treat> Treats, DbSet<Flavor> Flavors, DbSet<FlavorTreat> FlavorTreats
				
// create entities
> create Flavor.cs entity /w properties FlavorId, FlavorName, List<FlavorTreat> JoinEntities  
	add model validation with data annotation [Required(ErrorMessage = "string")] for FlavorName
	
> create Treat.cs entity /w properties TreatId, TreatName, List<FlavorTreat> JoinEntities  
	add model validation with data annotation [Required(ErrorMessage = "string")] for TreatName 

> create FlavorTreat.cs join entity /w FlavorTreatId, FlavorId, Flavor, TreatId, Treat

> create ApplicationUser.cs entity 
	inherit : IdentityUser
	
> create a ViewModels folder 
	create RegisterViewModel.cs /w Email, Password, ConfirmPassword and data annotations

	create LoginViewModel.cs /w Email, Password and data annotations


> run dotnet ef migrations add Initial, database update, confirm table is created
	
// create controller and corresponding views
> create HomeController and Views:
	create Index() action
		create Index.cshtml /w "Welcome to Pierre's Sweet and Savory Treats"
			<h4>Treats</h4> <h4>Flavors</4> place holders
				confirm view

> create TreatsController.cs and Views:
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form /w HtmlHelper method ValidationMessageFor

	create [HttpPost] Create() action
	
	confirm model validation works by entering empty field
		confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details

> create FlavorsController.cs and Views
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form /w HtmlHelper method ValidationMessageFor

	create [HttpPost] Create() action
		
	confirm model validation works by entering empty field
		confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details
	
> add to TreatsController.cs and Views:
	create AddFlavor() action
		create AddFlavor.cshtml form
		
	create [HttpPost] AddFlavor() action
	
	confirm adding flavor to treat on a treat's details page
	
> add conditional to Details.cshtml for Treat's Views checking IF @Model.JoinEntities.Flavors == 0, display disabled button "No flavors to assign", ELSE display active button "add a flavor"  
	
> add to FlavorsController.cs and Views:
	create AddTreat() action
		create AddTreat.cshtml form
		
	create [HttpPost] AddTreat() action
	
	confirm adding a treat to a flavor on a flavor's details page
	
> add conditional to Details.cshtml for Flavors Views checking IF @Model.JoinEntities.Treats == 0, display disabled button "No treats to give a flavor", ELSE display active button "add flavor to treat" 
		
> add to TreatsController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActionName("Delete")] Delete() action
		confirm deletion of a Treat
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Flavor on an individual Treat's Details page
			confirm deletion of a flavor attached to a treat
	
> add to FlavorsController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActioName("Delete")] Delete() action
		confirm deletion of a Flavor
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Treat on an individual Flavor's Details page
			confirm deletion of a Treat attached to a Flavor
			
confirm Home Index() controller /w DbSet Treats and Flavors in a Dictionary passes into View
	Treats and Flavors in h4 tags on Index.cshtml display all Treats and Flavors as ActionLinks
	
// adding login and registration	

> create AccountController.cs and Views
	
	create Index() action 
		
	create Register()IAction

	create [HttpPost] async Register() action 

	create Views/Account/Regiser.cshtml
	
	confirm register page throws errors when empty
	
	create Index.cshtml
	
	create Login.cshtml
	
	create Login() action
	
	create [HttpPost] async Login() action
	
	create [HttpPost] async LogOff() action
	
	comment IN password default override in Program.cs
		check if creating account un:test@test.com pw: test gets created
			check if login works
				check if Index.cshtml shows welcome msg for test@test.com
					check if logoff works
	
// add Authorization
> add [Authorize] attribute to TreatsController and FlavorsController /w using Microsoft.AspNetCore.Authorization;

> add [AllowAnonymous] above Index() and Details() actions in both controllers
	confirm going to Index.cshtml of Treats and Flavors shows all treats and flavors when not logged in, 
		confirm when click on a Treat and navigating to Details works, but clicking add, update, or delete does not 
			do same for Flavor
				log in and confirm clicking a Treats Details and adding, updating, and deleting work
					do same for Flavor

				
> comment IN password default in Program.cs and remove password default override
> comment IN data annotation [RegularExpression] in RegisterViewModel.cs

> complete README.md

NON-MVP:

// add individual User association to allow Update and Delete functionality to only Treats and Flavors they created 
// (see Lesson 9 of Auth.. with Identity)




























































