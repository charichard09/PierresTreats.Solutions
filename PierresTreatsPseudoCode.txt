Pierre's Sweet and Savory Treats
Pierre is back! He wants you to create a new application to market his sweet and savory treats. This time, he would like you to build an application with user authentication and a many-to-many relationship. Here are the features he wants in the application:

The application should have user authentication. A user should be able to log in and log out. Only logged in users should have create, update, and delete functionality. All users should be able to have read functionality.
There should be a many-to-many relationship between Treats and Flavors. A treat can have many flavors (such as sweet, savory, spicy, or creamy) and a flavor can have many treats. For instance, the "sweet" flavor could include chocolate croissants, cheesecake, and so on.
A user should be able to navigate to a splash page that lists all treats and flavors. Users should be able to click on an individual treat or flavor to see all the treats/flavors that belong to it.
Objectives
Your code will be reviewed for the following objectives:

// create Treats.cs and Flavor.cs entities with CRUD functionality
Does at least one of your classes have all CRUD methods implemented in your app?

// Details.cshtml on both show many-to-many relationship established
Are you able to view both sides of the many-many relationship? For a particular instance of a class, are you able to view all of the instances of the other class that are related to it?

// create Login(), LogOff(), Register(), Index() controllers 
// create Login.cshtml, Register.cshtml, Index.cstml in Views/Account/
Are users able to register, log in and log out with Identity?

// add [Authorize] attributes to CUD TreatsController and FlavorsController, and [Anonymous]? to Details() action of both
Is Create, Update and Delete functionality limited to authenticated users?

// confirm .ignore file has these
Build files and sensitive information are included in .gitignore file and are not in Git history, and includes instructions on how to create the appsettings.json and set up the project.

// confirm
Project is in a polished, portfolio-quality state.
The promptâ€™s required functionality and baseline project requirements are in place by the deadline.




> update appsettings.json with db name

// in Program.cs, update builder.Services.AddDbContext<T>... where T is FactoryContext

// database context
> create FactoryContext.cs /w DbSet<Engineer> Engineers, DbSet<Machine> Machines, DbSet<EngineerMachine> JoinEntities

// create entities
> create Engineer.cs entity /w properties EngineerId, Name, List<EngineerMachine> JoinEntities  
	
> create Machine.cs entity /w properties MachineId, Name, List<EngineerMachine> JoinEntities  

> create EngineerMachine.cs join entity /w EngineerMachineId, EngineerId, Engineer, MachineId, Machine

// run dotnet ef migrations add Initial, database update, confirm table is created
	
// create controller and corresponding views
> create HomeController and Views:
	create Index() action
		create Index.cshtml /w "Welcome to Dr. Sillystringz's Facotry 
			<h4>Engineers</h4> <h4>Machines</4> place holders
				confirm view

> create EngineersController.cs and Views:
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action
	
	confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details

> create MachinesController.cs and Views
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action
	
	confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details
	
> add to EngineersController.cs and Views:
	create AddMachine() action
		create AddMachine.cshtml form
		
	create [HttpPost] AddMachine() action
	
	confirm adding machine to engineer and seeing on engineers details page
	
> add conditional to Details.cshtml for Engineer Views checking IF @Model.JoinEntities.Machines == 0, display disabled button "No machines to assign", ELSE display active button "assign machine"  
	
> add to MachinesController.cs and Views:
	create AddEngineer() action
		create AddEngineer.cshtml form
		
	create [HttpPost] AddEngineer() action
	
	confirm adding engineer to machine and seeing on a machines details page
	
> add conditional to Details.cshtml for Machines Views checking IF @Model.JoinEntities.Engineers == 0, display disabled button "No engineers to assign", ELSE display active button "assign engineer" 
	
> add model validation with data annotation [Required(ErrorMessage = "string")] for Name entity property in Engineer.cs
	add HtmlHelper method ValidationMessageFor to Engineers/Create
		add model validation with data annotation [Required(ErrorMessage = "string")] for Name entity property in Machine.cs
			add HtmlHelper method ValidationMessageFor to Machines/Create
				confirm working by entering blank name for both
		
> add to EngineersController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActioName("Delete")] Delete() action
		confirm deletion of an Engineer
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Machine on an individual Engineer's Details page
			confirm deletion of a machine attached to an engineer
	
> add to MachinesController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActioName("Delete")] Delete() action
		confirm deletion of a Machine
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Engineer on an individual Machine's Details page
			confirm deletion of an engineer attached to a machine
			
add to HomeController.cs Index() controller DbSet Machines and Engineers in a Dictionary into View
		finish adding to Machines and Engineers tags to display all Machines and Engineers as ActionLinks
	
	
	
//post Friday project expanding next lesson on adding login and registration	

> Add ApplicationUser.cs to Models
	inherit : IdentityUser

> double check Program.cs has all neccessary Identity Service setups and app.UseAuth...

> dotnet ef migration add AddIdentity and update

> 
